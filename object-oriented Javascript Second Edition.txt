object-oriented Javascript Second Edition

前端
ECMAScript javascript
文档对象模型 DOM
浏览器对象模型  BOM

ECMAScript5 2009

ECMAScript6 2015

ECMAScript7 2016

类
  封装
  聚合  组合  将几个现有对象合并成一个新对象的过程
  继承
  多态

函数
所谓函数本质是一种代码的分组形式，一个对象并且有被调用。
关键词     function
函数名称
函数参数
函数体
return 子句,如果没有默认undefined

对于调用call 也可以将其称之为请求 invoke

参数
arguments 内建变量 实参
函数名.length 形参的个数

变量的作用域
全局变量   局部变量(函数变量)


变量提升 hoisting
当javascript执行过程进入新的函数时,这个函数内被声明的所有变量都会移动到函数最开始的地方
另外需要注意的是，被提升的只有变量的声明
只有函数体内声明的这些变量在该函数执行开始的就存在,而与之相关的赋值操作并不会被提升，还在其原来
的位置上

局部变量本身被提升到了函数最开始处

内部(私有)函数 函数内部的函数  该函数外不能访问
私有函数好处：
1 有助于我们确保全局名字空间的纯净性
2 私有性

返回函数的函数
将一个函数的返回值是函数
function a(){
  console.log("A");
  return function(){
    console.log("B");
  }
}

a = a();


函数也是数据

可以把一个函数赋值给一个变量  这种定义方式叫函数标识记法  function literal notation

function(){return 1;}是一个函数表达式
函数表达式可以被命名,称之为命名函数表达式 named function expression NFE
var  f = function MyFun(){}

MyFun是函数名字而不是变量,IE会错误的创建f和MyFun两个变量（新版已经修复了）

函数表达式和函数声明的区别
1 它们所在的上下文
2 函数声明只会出现在程序代码 在另一个函数的函数体中，或者在程序体中


匿名函数
var f = function(){}
通过这种方式定义的函数被称为匿名函数
当它不被赋值给变量单独使用的时候
1 可以将匿名函数作为参数传递给其他函数
  接收方函数就能利用我们所传递的函数来完成某些事情

2 可以定义某个匿名函数来执行某些一次性任务


回调函数
既然函数与任何可以被赋值给变量的数据是相同的，那么它当然可以像其他数据那样呗定义 删除 拷贝
以及当成参数传递给其他函数


即时函数 自执行匿名函数
1
(function(){

})()

2
(function(){}())

好处：不会产生任何全局变量
缺点：无法重复执行

如果需要的话,即时函数有可以有返回值
var result = ((function(){
  ......
  return value;
})())

闭包 closures
 作用域链
 es6之前没有块级作用域  只有：函数作用域  全局作用域
 函数作用域：在某个函数内定义所有变量在该函数外是不可见的


函数对象的属性
constructor属性其引用就是Function()这个构造器函数

length属性用于记录该函数声明所决定的参数数量

prototype属性
  1' 每个函数的prototype属性中都指向了一个对象
  2’ 只有在该函数是构造器时才会发挥作用
  3' 该函数创建的所有对象都会持有一个该prototype属性的引用，并可以将其当做自身的属性使用


call/apply 可以让一个对象去“借用”另一个对象的方法，并为己所用
如果我们没有将对象传递给call()的首参数，或者传递给它的是null，
它的调用对象将会被默认为全局对象

实际上就是通过call的首参数修改了对象函数的this值

arguments对象
Array.prototype.slice.call(arguments)
[].slice.call(arguments)

推断对象类型
Object.prototype.toString()
Object.prototype.toString.call({})
// "[object Object]"

Object.prototype.toString.call([])
// "[object Array]"

Object.prototype.toString.call(arguments)
// "[object Array]"

Object.prototype.toString.call(document.body)
// "[object HTMLBodyElement]"


String对象实际上是一个字符数组，其中包括用于每个字符的索引属性（ES5引入这个特性）

hasOwnProperty()

isPrototypeOf()

Object.getPrototypeOf()
