object-oriented Javascript first Edition

1. 数据类型
string number boolean undefiend null object

2. null与undefined区别
null 是引用型的特殊类型 例如获取一个不存在DOM元素
undefiend 是已定义未赋值的变量 会自动复制undefiend

当进行某种算术运算的时候有如下体现：
var i = 1 + undefiend;  // NaN

var i = 1 + null       // 1

undefiend 转出数字

null      转出布尔值

但是与字符串运算时候都会转出字符串的 “null” "undefiend"

3. typeof string number boolean undefiend function object
内置类型typeof都是object

4 typeof null 返回值 object

function  isNull(input){
    return  (!input && (typeof input === 'object') ? true :  false) ;
}

5 false
  空字符串 “”
  null
  undefiend
  数字 0
  数字 NaN
  布尔值 false

6 检查变量存在最好方法
  type x === 'undefiend'

7 函数
  arguments 是类数组
  [].silcie.call(arguments)
  Array.from(arguments)

8 isNaN()  number.is()

9 parseInt() 第二个参数 radix

10 encodeURI()
   该方法的目的是对 URI 进行完整的编码，因此对以下在 URI 中具有特殊含义的 ASCII 标点符号，
   encodeURI() 函数是不会进行转义的：;/?:@&=+$,#
   encodeURI假定它的参数是完整的URI

   encodeURIComponent()
   该方法不会对 ASCII 字母和数字进行编码，
   也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ' ( ) 。
   其他字符（比如 ：;/?:@&=+$,# 这些用于分隔 URI 组件的标点符号），
   都是由一个或多个十六进制的转义序列替换的。
   encodeURIComponent假定它的参数是 URI 的一部分（比如协议、主机名、路径或查询字符串）。
   因此 encodeURIComponent() 函数将转义用于分隔 URI 各个部分的标点符号。

11 函数也是数据
   函数声明 函数表达式

12 自执行匿名函数
   (function(){ival1,ival2})(va1,va2)


13 词法作用域
   在javascript中,每一个函数都有自己的词法作用域，每一个函数在被定义时(而非执行时候)都会创建
   一个属于的自己的环境（词法作用域）。
   每一个函数只能访问自身作用域和父级作用域一直到全局作用域

   两个函数之间不能对方的作用域如03.js

   闭包---突破作用域链
   每个函数都会拥有一块属于自己的私用函数,用以存储一些变量和函数。
   如果一个函数需要在其父级函数结束之后留住对父级作用域的链接的话，就必须要为此建立一个闭包

14 当我们创建对象时，实际上同时也赋予了该对象一种特殊属性---即构造器属性
   constructor property,由于构造器属性所引用的是一个函数

   instanceof 测试一个对象是不是由某个指定的构造函数所创建的

15 当对象比较操作 当且仅当两个引用指向同一个对象时为true

16 object是javascript所有对象的父级对象，这意味着我们创建的所有对象都继承于此。
   toString()返回对象描述字符串
   valueOf()返回对象单值描述信息

17 Function对象的length属性用于记录该函数所拥有的参数数量

18 Function的property属性
   property属性指向一个对象
   该属性只有该函数是构造器时才会发挥作用
   该函数创建的所有对象都会持有一个该prototype属性引用，并可以将其当做自身的属性来使用
19 arguments是类数组
   还有一个callee属性指向当前被调用的函数对象

20 原型
   对于原型要理解驻留(live)这个概念
   由于在javascript中，对象都是通过传引用的方式来传递的，因此我们所创建的每个新对象实体中并
   没有一份属于自己原型的复本。

   prototype chain 原型链

   isPrototypeOf(),当前对象是否另一个对象的原型

   __proto__与prototype并不是等价的，__proto__实际上是某个实体对象的属性，而prototype则是
   属于构造器函数的属性

21 原型陷阱
   当我们对原型对象执行完全替换时，可能会触发原型链中某种异常
   prototype.constructor属性是不可靠的

   即便是对象创建之后，我们也依然能为原型添加属性，并且所有的相关对象都可以
   随时访问这些新添加的属性.

   当重写某对象的prototype时，重置相应的congstructor属性是一个好习惯

22 继承
   .......


23 BOM & DOM
   当前载入页面所拥有的对象也叫文档模型 DOM
   页面以外事物所拥有的对象也叫浏览器模型 BOM
   DOM Level1 DOM Level2 DOM Level3

   BOM window
   window.navigator  window.navigator.userAgent
   window.location
   location.href
   location.hostname
   location.reload()
   location.replace()  // 不会再历史记录中不会出现
   location.assign()
   windwo.history   // 允许在同一个浏览器会话session中存储有限数量的访问记录
   windwo.history.length
   history.back()
   histroy.forward()
   history.go()

   window.frames属性是当前页面中所有frame元素的集合,这里对frame和iframe不做区分。
   无论当前页面中是否存在frame元素，window.frames属性总是存在的，并指向了window对象本身

   frames.length

   每个frame元素都包含一个别的页面，这些页面也都拥有属于自己的全局window布局。
   如果想访问对应frame对应的页面
   window.frames[0]
   window.frames[0].window
   frames[0].window
   frames[0]

   通过子元素访问父级页面
   frame[0].parent === window  // true

   访问到当前最顶层页面
   window.frames[0].window.top === window

   window.frames[0].window.top === window.top

   window.frames[0].window.top === top

   self与window基本相同

   self === window

   frame[0].window === frame[0].self

   如果frame元素拥有name属性,可以通过name属性来访问frame

   window.frames['myframe'] === window.frame[0]

   window.screen
   window.screen.colorDepth
   window.width/window.height
   window.availWidth/window.availHeight

   height指的是总分辨率
   availHeight指的是除去操作系统菜单(例如windows的任务栏以外的子区域)

   window.open()
   url
   新窗口名字 用于新窗体form标签的属性值
   功能性列表
   尺寸
   弹出窗的长与宽
   状态栏可见性
   其他

   window.close()

   window.moveTo()  window.moveBy()

   window.resizeTo()  window.resizeBy()

   window.alert()不是ECMAScript

   window.confirm()

   window.prompt()

   window.setTimeout()

   window.setInterval()

   window.document

   coreHTML与HTMLDOM

   DOM既能解析XML文档，也能解析HTML文档

   DOMlevel1中用于解析所有XML文档的那部分称之为CoreDOM
   在coreDOM基础上进行扩展的那部分吧称之为HTML DOM
   HTML DOM并不适用于所有的XML文档，并只适用于HTML文档

   构造器         父级构造器        所属组件           注释说明
   Node                          coreDOM           树上所有节点都属于Node
   Doument       Node            coreDOM           Document对象，主要用于表示XML文档项目
   HTMLDocument  Document        HTMLDOM           window.document对象
   ELement       Node            coreDOM           每一个标签元素
   HTMLelement   Element         HTMLDOM           通用性构造器，所有与HTML相关的构造器都继承与该对象
   
